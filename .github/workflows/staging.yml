name: Staging Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    timeout-minutes: 5

    if: "!contains(github.event.head_commit.message, '[meta-id]')"

    steps:
      - uses: actions/checkout@master
        with:
          token: ${{ secrets.GH_ACTION_REPOS_TOKEN }}

      - uses: actions/setup-node@v1
        with:
          node-version: '12'

      - name: setup
        env:
          NPM_TOKEN_GITHUB: ${{ secrets.NPM_TOKEN_GITHUB }}
        run: |
          echo "//npm.pkg.github.com/:_authToken=${NPM_TOKEN_GITHUB}" > $HOME/.npmrc
          git config --global user.email "raccon@htmlacademy.ru"
          git config --global user.name "racconbot"
      - name: install dependencies
        run: npm ci --production

      - name: generate meta id
        run: |
          npm run meta-id
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m '[meta-id]'
            git push
          fi
      - name: release
        run: |
          npm run release
      - name: setup keys
        env:
          DEPLOY_PRIVATE_KEY: ${{ secrets.DEPLOY_PRIVATE_KEY }}
          DEPLOY_PUBLIC_KEY: ${{ secrets.DEPLOY_PUBLIC_KEY }}
          HA_USERNAME: ${{ secrets.HA_USERNAME }}
          HA_STAGING_HOST: ${{ secrets.HA_STAGING_HOST }}
        run: |
          SSH_PATH="$HOME/.ssh"
          mkdir -p "$SSH_PATH"
          touch "$SSH_PATH/known_hosts"
          echo "$DEPLOY_PRIVATE_KEY" > "$SSH_PATH/deploy_key"
          echo "$DEPLOY_PUBLIC_KEY" > "$SSH_PATH/deploy_key.pub"
          chmod 700 "$SSH_PATH"
          chmod 600 "$SSH_PATH/known_hosts"
          chmod 600 "$SSH_PATH/deploy_key"
          chmod 600 "$SSH_PATH/deploy_key.pub"
          echo "host $HA_STAGING_HOST" >> "$SSH_PATH/config"
          echo "  HostName $HA_STAGING_HOST" >> "$SSH_PATH/config"
          echo "  IdentityFile $SSH_PATH/deploy_key" >> "$SSH_PATH/config"
          echo "  User $HA_USERNAME" >> "$SSH_PATH/config"
          chmod 600 "$SSH_PATH/config"
          ssh-keyscan -t rsa $HA_STAGING_HOST >> "$SSH_PATH/known_hosts"
          eval $(ssh-agent)
          ssh-add "$SSH_PATH/deploy_key"

      #- name: send build
      #  env:
      #    HA_STAGING_HOST: ${{ secrets.HA_STAGING_HOST }}
      #    HA_USERNAME: ${{ secrets.HA_USERNAME }}
      #  run: |
      #    rsync -arP --delete release/ $HA_USERNAME@$HA_STAGING_HOST:/usr/www/intensives/data/<COURSE_NAME>

      - name: define version
        run: |
          echo "version=${GITHUB_REF##*/}" >> $GITHUB_ENV

      #- name: run prepare
      #  env:
      #    HA_STAGING_HOST: ${{ secrets.HA_STAGING_HOST }}
      #    HA_USERNAME: ${{ secrets.HA_USERNAME }}
      #  run: |
      #    ssh $HA_USERNAME@$HA_STAGING_HOST /usr/local/bin/php /usr/www/workspace/up_staging_master/console.php intensive:prepare <COURSE_NAME>

      #- name: notify success
      #  if: ${{ success() }}
      #  env:
      #    DISCORD_WH: ${{ secrets.DISCORD_WH_HTMLAUTHORS }}
      #  run: |
      #    curl -i -H "Accept: application/json" -H "Content-Type:application/json" -X POST --data '{"content":":rocket: Контет курса **HTML и CSS, уровень 1** долетел до прода и доступен по [ссылке](https://up.htmlacademy.ru/htmlcss/${{ env.version }}).\nСпасибо, _${{ github.actor }}_!","username":"Кексобот Деплоев"}' $DISCORD_WH

      #- name: notify failure
      #  if: ${{ failure() }}
      #  env:
      #    DISCORD_WH: ${{ secrets.DISCORD_WH_HTMLAUTHORS }}
      #  run: |
      #    curl -i -H "Accept: application/json" -H "Content-Type:application/json" -X POST --data '{"content":":face_with_symbols_on_mouth: Контент курса **HTML и CSS, уровень 1** не долетел до прода, что-то пошло не так.","username":"Кексобот Деплоев"}' $DISCORD_WH
